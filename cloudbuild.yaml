# cloudbuild.yaml (v12.1 - Fixed variable access in cache restore steps)

options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _SERVICE_NAME: web-app
  _DEPLOY_REGION: europe-west2
  _AR_HOSTNAME: europe-west2-docker.pkg.dev
  _AR_PROJECT_ID: apprenticewatch-55cb9
  _AR_REPOSITORY: cloud-run-source-deploy
  _PLATFORM: managed
  _IMAGE_NAME: ${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${REPO_NAME}/${_SERVICE_NAME}
  _CACHE_BUCKET: gs://apprentice-watch-web-build-cache-g # Ensure this is correct
  _CACHE_ARCHIVE_NPM: cache-npm.tar.gz
  _CACHE_ARCHIVE_NEXT: cache-next.tar.gz
  _NODE_VERSION: '18'
  # ENV VARS (Define securely in Trigger UI)
  _NEXT_PUBLIC_SUPABASE_URL: https://swtrxonxzchgudehqdge.supabase.co
  _NEXT_PUBLIC_SUPABASE_ANON_KEY: 'your-anon-key'
  _NEXT_PUBLIC_BASE_URL: https://apprenticewatch.com
  _NEXT_PUBLIC_LOGODEV_KEY: 'your-logodev-key'
  _NEXT_PUBLIC_GEMINI_API_KEY: 'your-gemini-key'
  _NEXT_PUBLIC_MAPBOX_TOKEN: 'your-mapbox-token'
  _NEXT_PUBLIC_GA_TRACKING_ID: G-1GKBR9HKF3
  _REVALIDATION_SECRET_TOKEN: 'your-secret-token'
  _LATEST_TAG_NAME: 'latest'

steps:
  # Step 0: Get package lock hash
  - name: 'bash'
    id: 'Get package lock hash'
    script: |
      #!/usr/bin/env bash
      set -e
      LOCKFILE_HASH="no-lock-file"; if [[ -f "package-lock.json" ]]; then LOCKFILE_HASH=$(sha1sum package-lock.json | awk '{ print $1 }'); echo "Using package-lock.json hash: ${LOCKFILE_HASH}"; elif [[ -f "yarn.lock" ]]; then LOCKFILE_HASH=$(sha1sum yarn.lock | awk '{ print $1 }'); echo "Using yarn.lock hash: ${LOCKFILE_HASH}"; else echo "Warning: No lock file found."; fi; echo "${LOCKFILE_HASH}" > /workspace/pkg_lock_sha.txt

  # --- Step 1: Restore NPM Cache (MODIFIED SCRIPT) ---
  - id: restore-npm-cache
    name: 'gcr.io/cloud-builders/gsutil'
    waitFor: ['Get package lock hash']
    # Use entrypoint bash to ensure substitutions are evaluated in the args
    entrypoint: bash
    args:
      - -c
      - |
        set -Eeuo pipefail
        LOCK_HASH=$(cat /workspace/pkg_lock_sha.txt)
        if [[ "$${LOCK_HASH}" == "no-lock-file" ]]; then echo "Skipping NPM cache download (no lock file)."; exit 0; fi
        CACHE_PATH="gs://${_CACHE_BUCKET}/npm-$${LOCK_HASH}-${_CACHE_ARCHIVE_NPM}"
        ARCHIVE_FILE="/workspace/${_CACHE_ARCHIVE_NPM}"
        echo "Attempting to download NPM cache: $${CACHE_PATH}"
        # Need double $$ for LOCK_HASH inside the script block passed via -c
        (gsutil -q cp "$${CACHE_PATH}" "$${ARCHIVE_FILE}") \
        && (echo "NPM cache archive downloaded. Extracting..." && mkdir -p /workspace/.npm && tar -xzmf "$${ARCHIVE_FILE}" -C /workspace/.npm && rm "$${ARCHIVE_FILE}" && echo "NPM cache extracted.") \
        || echo "NPM cache not found or download/extract failed."

  # --- Step 2: Restore .next Cache (MODIFIED SCRIPT) ---
  - id: restore-next-cache
    name: 'gcr.io/cloud-builders/gsutil'
    waitFor: ['-']
    # Use entrypoint bash to ensure substitutions are evaluated in the args
    entrypoint: bash
    args:
      - -c
      - |
        set -Eeuo pipefail
        CACHE_PATH="gs://${_CACHE_BUCKET}/latest-${_CACHE_ARCHIVE_NEXT}"
        ARCHIVE_FILE="/workspace/${_CACHE_ARCHIVE_NEXT}"
        echo "Attempting to download .next cache: $${CACHE_PATH}"
        # Need double $$ for variables inside the script block passed via -c
        (gsutil -q cp "$${CACHE_PATH}" "$${ARCHIVE_FILE}") \
        && (echo ".next cache archive downloaded. Extracting..." && mkdir -p /workspace/.next/cache && tar -xzmf "$${ARCHIVE_FILE}" --strip-components=1 -C /workspace/.next/cache && rm "$${ARCHIVE_FILE}" && echo ".next cache extracted.") \
        || echo ".next cache not found or download/extract failed."

  # Step 3: Install Dependencies
  - id: npm-ci
    name: 'node:${_NODE_VERSION}'
    waitFor: ['restore-npm-cache']
    entrypoint: npm
    args: ['ci', '--cache', '/workspace/.npm', '--prefer-offline']

  # Step 4: Build Next.js App
  - id: npm-build
    name: 'node:${_NODE_VERSION}'
    waitFor: ['npm-ci', 'restore-next-cache']
    entrypoint: npm
    args: ['run', 'build']
    env:
      - 'NODE_ENV=production'
      - 'NEXT_PUBLIC_SUPABASE_URL=${_NEXT_PUBLIC_SUPABASE_URL}'
      - 'NEXT_PUBLIC_SUPABASE_ANON_KEY=${_NEXT_PUBLIC_SUPABASE_ANON_KEY}'
      - 'NEXT_PUBLIC_BASE_URL=${_NEXT_PUBLIC_BASE_URL}'
      - 'NEXT_PUBLIC_LOGODEV_KEY=${_NEXT_PUBLIC_LOGODEV_KEY}'
      - 'NEXT_PUBLIC_GEMINI_API_KEY=${_NEXT_PUBLIC_GEMINI_API_KEY}'
      - 'NEXT_PUBLIC_MAPBOX_TOKEN=${_NEXT_PUBLIC_MAPBOX_TOKEN}'
      - 'NEXT_PUBLIC_GA_TRACKING_ID=${_NEXT_PUBLIC_GA_TRACKING_ID}'

  # --- Step 5: Save NPM Cache (MODIFIED SCRIPT) ---
  - id: save-npm-cache
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    waitFor: ['npm-ci']
    entrypoint: bash
    args:
      - -c
      - |
        set -Eeuo pipefail
        LOCK_HASH=$(cat /workspace/pkg_lock_sha.txt)
        if [[ "$${LOCK_HASH}" == "no-lock-file" ]]; then echo "Skipping NPM cache save (no lock file)."; exit 0; fi
        CACHE_PATH="gs://${_CACHE_BUCKET}/npm-$${LOCK_HASH}-${_CACHE_ARCHIVE_NPM}"
        ARCHIVE_FILE="/workspace/${_CACHE_ARCHIVE_NPM}"
        SOURCE_DIR=".npm"
        if [[ -d "/workspace/$${SOURCE_DIR}" ]] && [[ -n "$(ls -A /workspace/$${SOURCE_DIR})" ]]; then
          echo "Creating and uploading NPM cache to $${CACHE_PATH}..."
          (cd /workspace && tar --ignore-failed-read -czf "$${ARCHIVE_FILE}" "$${SOURCE_DIR}") && \
          gsutil -q -h "Cache-Control:private, max-age=0, no-transform" cp "$${ARCHIVE_FILE}" "$${CACHE_PATH}" && \
          rm "$${ARCHIVE_FILE}" && \
          echo "NPM cache saved."
        else
          echo "Skipping NPM cache save (/workspace/$${SOURCE_DIR} not found or empty)."
        fi

  # --- Step 6: Save .next Cache (MODIFIED SCRIPT) ---
  - id: save-next-cache
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    waitFor: ['npm-build']
    entrypoint: bash
    args:
      - -c
      - |
        set -Eeuo pipefail
        CACHE_PATH="gs://${_CACHE_BUCKET}/latest-${_CACHE_ARCHIVE_NEXT}"
        ARCHIVE_FILE="/workspace/${_CACHE_ARCHIVE_NEXT}"
        SOURCE_DIR=".next/cache"
        PARENT_DIR=".next"
        if [[ -d "/workspace/$${SOURCE_DIR}" ]] && [[ -n "$(ls -A /workspace/$${SOURCE_DIR})" ]]; then
          echo "Creating and uploading .next cache to $${CACHE_PATH}..."
          (cd "/workspace/$${PARENT_DIR}" && tar --ignore-failed-read -czf "$${ARCHIVE_FILE}" cache) && \
          gsutil -q -h "Cache-Control:private, max-age=0, no-transform" cp "$${ARCHIVE_FILE}" "$${CACHE_PATH}" && \
          rm "$${ARCHIVE_FILE}" && \
          echo ".next cache saved."
        else
          echo "Skipping .next cache save (/workspace/$${SOURCE_DIR} not found or empty)."
        fi

  # Step 7: Build and Push Docker Image
  - id: docker-build
    name: 'gcr.io/cloud-builders/docker'
    waitFor: ['npm-build']
    args:
      - 'build'
      - '--tag'
      - '${_IMAGE_NAME}:${COMMIT_SHA}'
      - '--tag'
      - '${_IMAGE_NAME}:${_LATEST_TAG_NAME}'
      - '--cache-from'
      - '${_IMAGE_NAME}:${_LATEST_TAG_NAME}'
      - '.'

  - id: docker-push
    name: 'gcr.io/cloud-builders/docker'
    waitFor: ['docker-build', 'save-npm-cache', 'save-next-cache']
    args: ['push', '${_IMAGE_NAME}']

  # Step 8: Deploy to Cloud Run
  - id: cloudrun-deploy
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    waitFor: ['docker-push']
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'update'
      - '${_SERVICE_NAME}'
      - '--platform=managed'
      - '--image=${_IMAGE_NAME}:${COMMIT_SHA}'
      - '--labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=${COMMIT_SHA},gcb-build-id=${BUILD_ID},gcb-trigger-id=${_TRIGGER_ID}'
      - '--region=${_DEPLOY_REGION}'
      - '--quiet'
      - '--set-env-vars=NEXT_PUBLIC_SUPABASE_URL=${_NEXT_PUBLIC_SUPABASE_URL},NEXT_PUBLIC_SUPABASE_ANON_KEY=${_NEXT_PUBLIC_SUPABASE_ANON_KEY},NEXT_PUBLIC_BASE_URL=${_NEXT_PUBLIC_BASE_URL},NEXT_PUBLIC_LOGODEV_KEY=${_NEXT_PUBLIC_LOGODEV_KEY},NEXT_PUBLIC_GEMINI_API_KEY=${_NEXT_PUBLIC_GEMINI_API_KEY},NEXT_PUBLIC_MAPBOX_TOKEN=${_NEXT_PUBLIC_MAPBOX_TOKEN},NEXT_PUBLIC_GA_TRACKING_ID=${_NEXT_PUBLIC_GA_TRACKING_ID},REVALIDATION_SECRET_TOKEN=${_REVALIDATION_SECRET_TOKEN}'

# Images list (optional if using explicit push)
images:
  - '${_IMAGE_NAME}:${COMMIT_SHA}'
  - '${_IMAGE_NAME}:${_LATEST_TAG_NAME}'

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - web-app