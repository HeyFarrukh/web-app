# cloudbuild.yaml (v13 - Workspace build, NPM cache, Original Deploy Step)

options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _SERVICE_NAME: web-app
  _DEPLOY_REGION: europe-west2
  _AR_HOSTNAME: europe-west2-docker.pkg.dev
  _AR_PROJECT_ID: apprenticewatch-55cb9
  _AR_REPOSITORY: cloud-run-source-deploy
  _PLATFORM: managed
  _IMAGE_NAME: ${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${REPO_NAME}/${_SERVICE_NAME}
  _CACHE_BUCKET: apprentice-watch-web-build-cache-g
  _CACHE_ARCHIVE_NPM: cache-npm.tar.gz
  # _CACHE_ARCHIVE_NEXT: cache-next.tar.gz # Still disabled
  _NODE_VERSION: '18'
  # ENV VARS for build (Define securely in Trigger UI)
  _NEXT_PUBLIC_SUPABASE_URL: https://swtrxonxzchgudehqdge.supabase.co
  _NEXT_PUBLIC_SUPABASE_ANON_KEY: 'your-anon-key'
  _NEXT_PUBLIC_BASE_URL: https://apprenticewatch.com
  _NEXT_PUBLIC_LOGODEV_KEY: 'your-logodev-key'
  _NEXT_PUBLIC_GEMINI_API_KEY: 'your-gemini-key'
  _NEXT_PUBLIC_MAPBOX_TOKEN: 'your-mapbox-token'
  _NEXT_PUBLIC_GA_TRACKING_ID: G-1GKBR9HKF3
  # _REVALIDATION_SECRET_TOKEN: 'your-secret-token' # Not passed to build steps
  _LATEST_TAG_NAME: 'latest'

steps:
  # Step 0: Get package lock hash
  - name: 'bash'
    id: 'Get package lock hash'
    script: |
      #!/usr/bin/env bash
      set -e
      LOCKFILE_HASH="no-lock-file"; if [[ -f "package-lock.json" ]]; then LOCKFILE_HASH=$(sha1sum package-lock.json | awk '{ print $1 }'); echo "Using package-lock.json hash: ${LOCKFILE_HASH}"; elif [[ -f "yarn.lock" ]]; then LOCKFILE_HASH=$(sha1sum yarn.lock | awk '{ print $1 }'); echo "Using yarn.lock hash: ${LOCKFILE_HASH}"; else echo "Warning: No lock file found."; fi; echo "${LOCKFILE_HASH}" > /workspace/pkg_lock_sha.txt

  # Step 1: Restore NPM Cache
  - id: restore-npm-cache
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    waitFor: ['Get package lock hash']
    entrypoint: bash
    args:
      - -c
      - |
        set -Eeuo pipefail
        LOCK_HASH=$(cat /workspace/pkg_lock_sha.txt)
        if [[ "$${LOCK_HASH}" == "no-lock-file" ]]; then echo "Skipping NPM cache download (no lock file)."; exit 0; fi
        CACHE_PATH="gs://${_CACHE_BUCKET}/npm-$${LOCK_HASH}-${_CACHE_ARCHIVE_NPM}"
        ARCHIVE_FILE="/workspace/${_CACHE_ARCHIVE_NPM}"
        echo "Attempting to download NPM cache: $${CACHE_PATH}"
        if (gsutil -q cp "$${CACHE_PATH}" "$${ARCHIVE_FILE}"); then
          echo "NPM cache archive downloaded. Extracting..."
          mkdir -p /workspace/.npm
          if (tar -xzmf "$${ARCHIVE_FILE}" -C /workspace/.npm); then
             rm "$${ARCHIVE_FILE}" && echo "NPM cache extracted successfully."
          else
             echo "ERROR: NPM cache extraction failed." && exit 1
          fi
        else
          echo "NPM cache not found or download failed."
        fi

  # Step 2: Install Dependencies (Should be FAST)
  - id: npm-ci
    name: 'node:${_NODE_VERSION}'
    waitFor: ['restore-npm-cache']
    entrypoint: npm
    args: ['ci', '--cache', '/workspace/.npm', '--prefer-offline']

  # Step 3: Build Next.js App
  - id: npm-build
    name: 'node:${_NODE_VERSION}'
    waitFor: ['npm-ci']
    entrypoint: npm
    args: ['run', 'build']
    env: # Env vars needed ONLY for build time
      - 'NODE_ENV=production'
      - 'NEXT_PUBLIC_SUPABASE_URL=${_NEXT_PUBLIC_SUPABASE_URL}'
      - 'NEXT_PUBLIC_SUPABASE_ANON_KEY=${_NEXT_PUBLIC_SUPABASE_ANON_KEY}'
      - 'NEXT_PUBLIC_BASE_URL=${_NEXT_PUBLIC_BASE_URL}'
      - 'NEXT_PUBLIC_LOGODEV_KEY=${_NEXT_PUBLIC_LOGODEV_KEY}'
      - 'NEXT_PUBLIC_GEMINI_API_KEY=${_NEXT_PUBLIC_GEMINI_API_KEY}'
      - 'NEXT_PUBLIC_MAPBOX_TOKEN=${_NEXT_PUBLIC_MAPBOX_TOKEN}'
      - 'NEXT_PUBLIC_GA_TRACKING_ID=${_NEXT_PUBLIC_GA_TRACKING_ID}'

  # Step 4: Save NPM Cache
  - id: save-npm-cache
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    waitFor: ['npm-ci']
    entrypoint: bash
    args:
      - -c
      - |
        set -Eeuo pipefail
        LOCK_HASH=$(cat /workspace/pkg_lock_sha.txt)
        if [[ "$${LOCK_HASH}" == "no-lock-file" ]]; then echo "Skipping NPM cache save (no lock file)."; exit 0; fi
        CACHE_PATH="gs://${_CACHE_BUCKET}/npm-$${LOCK_HASH}-${_CACHE_ARCHIVE_NPM}"
        ARCHIVE_FILE="/workspace/${_CACHE_ARCHIVE_NPM}"
        SOURCE_DIR=".npm"
        if [[ ! -d "/workspace/$${SOURCE_DIR}" ]] || [[ -z "$(ls -A /workspace/$${SOURCE_DIR})" ]]; then
            echo "Skipping NPM cache save (/workspace/$${SOURCE_DIR} not found or empty)."
            exit 0
        fi
        echo "Creating and uploading NPM cache to $${CACHE_PATH}..."
        # Ignore tar errors, fail only if gsutil fails
        (cd /workspace && tar --ignore-failed-read -czf "$${ARCHIVE_FILE}" "$${SOURCE_DIR}") || echo "Warning: tar command for NPM cache exited with non-zero status."
        if [[ -f "$${ARCHIVE_FILE}" ]]; then
          echo "Archive file exists. Uploading..."
          if (gsutil -q -h "Cache-Control:private, max-age=0, no-transform" cp "$${ARCHIVE_FILE}" "$${CACHE_PATH}"); then
             rm "$${ARCHIVE_FILE}" && echo "NPM cache saved."
          else
             echo "ERROR: gsutil upload failed for NPM cache." && exit 1
          fi
        else
          echo "ERROR: Archive file not created by tar for NPM cache." && exit 1
        fi

  # Step 5: Build Docker Image (Uses simplified Dockerfile v11)
  - id: docker-build
    name: 'gcr.io/cloud-builders/docker'
    waitFor: ['npm-build']
    args:
      - 'build'
      - '--tag'
      - '${_IMAGE_NAME}:${COMMIT_SHA}'
      - '--tag'
      - '${_IMAGE_NAME}:${_LATEST_TAG_NAME}'
      - '--cache-from'
      - '${_IMAGE_NAME}:${_LATEST_TAG_NAME}'
      - '.'

  # Step 6: Explicit Docker Push Tags
  - id: docker-push-commit
    name: 'gcr.io/cloud-builders/docker'
    waitFor: ['docker-build', 'save-npm-cache']
    args: ['push', '${_IMAGE_NAME}:${COMMIT_SHA}']

  - id: docker-push-latest
    name: 'gcr.io/cloud-builders/docker'
    waitFor: ['docker-push-commit']
    args: ['push', '${_IMAGE_NAME}:${_LATEST_TAG_NAME}']

  # Step 7: Deploy using the ORIGINAL command structure
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Deploy' # Keep ID simple
    waitFor: ['docker-push-latest'] # Wait for push
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'update'
      - '${_SERVICE_NAME}'
      - '--platform=managed'
      # Use the exact image name format from original
      - '--image=${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${REPO_NAME}/${_SERVICE_NAME}:${COMMIT_SHA}'
      # Keep labels consistent
      - '--labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=${COMMIT_SHA},gcb-build-id=${BUILD_ID},gcb-trigger-id=${_TRIGGER_ID}'
      - '--region=${_DEPLOY_REGION}'
      - '--quiet'
      # NO --set-env-vars included, matching the original exactly

# Images list
images:
  - '${_IMAGE_NAME}:${COMMIT_SHA}'
  - '${_IMAGE_NAME}:${_LATEST_TAG_NAME}'

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - web-app