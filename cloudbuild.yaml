# cloudbuild.yaml (v4 - Fixed script/args conflict in docker cp steps)

substitutions:
  _SERVICE_NAME: web-app
  _DEPLOY_REGION: europe-west2
  _AR_HOSTNAME: europe-west2-docker.pkg.dev
  _AR_PROJECT_ID: apprenticewatch-55cb9
  _AR_REPOSITORY: cloud-run-source-deploy
  _PLATFORM: managed
  _IMAGE_NAME: ${_AR_HOSTNAME}/${_AR_PROJECT_ID}/${_AR_REPOSITORY}/${REPO_NAME}/${_SERVICE_NAME}
  _CACHE_BUCKET: gs://apprentice-watch-web-build-cache-g # Your GCS cache bucket
  _CACHE_ARCHIVE_NODE: cache-node_modules.tar.gz
  _CACHE_ARCHIVE_NEXT: cache-next.tar.gz
  # --- Environment Variables (Define securely in Trigger UI) ---
  _NEXT_PUBLIC_SUPABASE_URL: https://swtrxonxzchgudehqdge.supabase.co
  _NEXT_PUBLIC_SUPABASE_ANON_KEY: 'your-anon-key'
  _NEXT_PUBLIC_BASE_URL: https://apprenticewatch.com
  _NEXT_PUBLIC_LOGODEV_KEY: 'your-logodev-key'
  _NEXT_PUBLIC_GEMINI_API_KEY: 'your-gemini-key'
  _NEXT_PUBLIC_MAPBOX_TOKEN: 'your-mapbox-token'
  _NEXT_PUBLIC_GA_TRACKING_ID: G-1GKBR9HKF3
  _REVALIDATION_SECRET_TOKEN: 'your-secret-token'

steps:
  # Step 0: Get package lock hash
  - name: 'bash'
    id: 'Get package lock hash'
    script: |
      #!/usr/bin/env bash
      set -e
      LOCKFILE_HASH="no-lock-file"
      if [[ -f "package-lock.json" ]]; then
        LOCKFILE_HASH=$(sha1sum package-lock.json | awk '{ print $1 }')
        echo "Using package-lock.json hash: ${LOCKFILE_HASH}"
      elif [[ -f "yarn.lock" ]]; then
        LOCKFILE_HASH=$(sha1sum yarn.lock | awk '{ print $1 }')
        echo "Using yarn.lock hash: ${LOCKFILE_HASH}"
      else
        echo "Warning: No lock file found."
      fi
      echo "${LOCKFILE_HASH}" > /workspace/pkg_lock_sha.txt

  # Step 1: Download node_modules cache
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Download node_modules cache'
    script: |
      #!/usr/bin/env bash
      set -e
      LOCK_HASH=$(cat /workspace/pkg_lock_sha.txt)
      if [[ "${LOCK_HASH}" == "no-lock-file" ]]; then
        echo "Skipping node_modules cache download (no lock file)."
        exit 0
      fi
      CACHE_FILE_GCS_PATH="${_CACHE_BUCKET}/${LOCK_HASH}-${_CACHE_ARCHIVE_NODE}"
      LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NODE}"
      echo "Attempting to download node_modules cache: ${CACHE_FILE_GCS_PATH}"
      (gsutil -q cp "${CACHE_FILE_GCS_PATH}" "${LOCAL_CACHE_FILE}") || echo "Node modules cache not found or download failed for hash ${LOCK_HASH}."

  # Step 2: Extract node_modules cache
  - name: 'ubuntu'
    id: 'Extract node_modules cache'
    script: |
       #!/usr/bin/env bash
       set -e
       LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NODE}"
       if [[ -f "${LOCAL_CACHE_FILE}" ]]; then
         echo "Extracting node_modules cache into /workspace/node_modules..."
         mkdir -p /workspace/node_modules
         tar -xzmf "${LOCAL_CACHE_FILE}" -C /workspace || echo "Warning: Failed to extract node_modules cache, continuing..."
         rm "${LOCAL_CACHE_FILE}"
         echo "node_modules cache extracted."
       else
         echo "No node_modules cache archive found to extract."
       fi
    waitFor: ['Download node_modules cache']

  # Step 3: Download .next/cache
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Download .next cache'
    script: |
      #!/usr/bin/env bash
      set -e
      CACHE_FILE_GCS_PATH="${_CACHE_BUCKET}/latest-${_CACHE_ARCHIVE_NEXT}"
      LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NEXT}"
      echo "Attempting to download .next cache: ${CACHE_FILE_GCS_PATH}"
      (gsutil -q cp "${CACHE_FILE_GCS_PATH}" "${LOCAL_CACHE_FILE}") || echo ".next cache not found or download failed."

  # Step 4: Extract .next cache
  - name: 'ubuntu'
    id: 'Extract .next cache'
    script: |
       #!/usr/bin/env bash
       set -e
       LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NEXT}"
       if [[ -f "${LOCAL_CACHE_FILE}" ]]; then
         echo "Extracting .next cache into /workspace/.next/cache..."
         mkdir -p /workspace/.next/cache
         tar -xzmf "${LOCAL_CACHE_FILE}" --strip-components=1 -C /workspace/.next/cache || echo "Warning: Failed to extract .next cache, continuing..."
         rm "${LOCAL_CACHE_FILE}"
         echo ".next cache extracted."
       else
         echo "No .next cache archive found to extract."
       fi
    waitFor: ['Extract node_modules cache', 'Download .next cache']

  # Step 5: Pull latest image for Docker cache
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull latest image for cache'
    entrypoint: 'bash'
    args: ['-c', 'docker pull ${_IMAGE_NAME}:latest || exit 0']
    waitFor: ['-']

  # Step 6: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build'
    args: [
            'build',
            '--tag', '${_IMAGE_NAME}:${COMMIT_SHA}',
            '--tag', '${_IMAGE_NAME}:latest',
            '--cache-from', '${_IMAGE_NAME}:latest',
            '--build-arg', 'NEXT_PUBLIC_SUPABASE_URL=${_NEXT_PUBLIC_SUPABASE_URL}',
            '--build-arg', 'NEXT_PUBLIC_SUPABASE_ANON_KEY=${_NEXT_PUBLIC_SUPABASE_ANON_KEY}',
            '--build-arg', 'NEXT_PUBLIC_BASE_URL=${_NEXT_PUBLIC_BASE_URL}',
            '--build-arg', 'NEXT_PUBLIC_LOGODEV_KEY=${_NEXT_PUBLIC_LOGODEV_KEY}',
            '--build-arg', 'NEXT_PUBLIC_GEMINI_API_KEY=${_NEXT_PUBLIC_GEMINI_API_KEY}',
            '--build-arg', 'NEXT_PUBLIC_MAPBOX_TOKEN=${_NEXT_PUBLIC_MAPBOX_TOKEN}',
            '--build-arg', 'NEXT_PUBLIC_GA_TRACKING_ID=${_NEXT_PUBLIC_GA_TRACKING_ID}',
            '.',
        ]
    waitFor: ['Extract .next cache', 'Pull latest image for cache']

  # Step 7: Create dummy container from build image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Create dummy container'
    args: ['create', '--name', 'extractor', '${_IMAGE_NAME}:${COMMIT_SHA}']
    waitFor: ['Build']

  # Step 8: Copy node_modules from dummy container to workspace (conditionally)
  # --- CORRECTED: Removed 'args' field ---
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Copy node_modules from container'
    # 'args' field REMOVED
    script: |
       #!/usr/bin/env bash
       set -e
       # Only copy if node_modules weren't extracted from GCS cache
       if [[ ! -f "/workspace/${_CACHE_ARCHIVE_NODE}" ]]; then
         echo "Copying node_modules from built image to workspace..."
         # Execute docker cp within script
         docker cp extractor:/app/node_modules /workspace/node_modules
       else
         echo "Skipping copy of node_modules from container (already extracted from GCS)."
       fi
    waitFor: ['Create dummy container', 'Extract node_modules cache']

  # Step 9: Copy .next/cache from dummy container to workspace (conditionally)
  # --- CORRECTED: Removed 'args' field ---
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Copy .next cache from container'
    # 'args' field REMOVED
    script: |
       #!/usr/bin/env bash
       set -e
       # Only copy if .next/cache wasn't extracted from GCS cache
       if [[ ! -f "/workspace/${_CACHE_ARCHIVE_NEXT}" ]]; then
         echo "Copying .next/cache from built image to workspace..."
         mkdir -p /workspace/.next # Ensure parent dir exists
         # Execute docker cp within script
         docker cp extractor:/app/.next/cache /workspace/.next/cache
       else
         echo "Skipping copy of .next/cache from container (already extracted from GCS)."
       fi
    waitFor: ['Create dummy container', 'Extract .next cache']

  # Step 10: Remove the dummy container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Remove dummy container'
    args: ['rm', 'extractor']
    waitFor: ['Copy node_modules from container', 'Copy .next cache from container']

  # Step 11: Create node_modules cache archive
  - name: 'ubuntu'
    id: 'Create node_modules cache archive'
    script: |
       #!/usr/bin/env bash
       set -e
       LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NODE}"
       if [[ -d "/workspace/node_modules" ]] && [[ -n "$(ls -A /workspace/node_modules)" ]]; then
         echo "Creating node_modules cache archive..."
         tar --ignore-failed-read -czf "${LOCAL_CACHE_FILE}" -C /workspace node_modules
       else
         echo "Skipping node_modules cache archiving (/workspace/node_modules does not exist or is empty)."
         touch "${LOCAL_CACHE_FILE}"
       fi
    waitFor: ['Remove dummy container']

  # Step 12: Upload node_modules cache
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Upload node_modules cache'
    script: |
       #!/usr/bin/env bash
       set -e
       LOCK_HASH=$(cat /workspace/pkg_lock_sha.txt)
       if [[ "${LOCK_HASH}" == "no-lock-file" ]]; then
         echo "Skipping node_modules cache upload (no lock file)."
         exit 0
       fi
       CACHE_FILE_GCS_PATH="${_CACHE_BUCKET}/${LOCK_HASH}-${_CACHE_ARCHIVE_NODE}"
       LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NODE}"
       if [[ -f "${LOCAL_CACHE_FILE}" ]] && [[ $(stat -c%s "${LOCAL_CACHE_FILE}") -gt 100 ]]; then
         echo "Uploading node_modules cache: ${CACHE_FILE_GCS_PATH}"
         gsutil -q -h "Cache-Control:private, max-age=0, no-transform" cp "${LOCAL_CACHE_FILE}" "${CACHE_FILE_GCS_PATH}"
       else
         echo "Skipping upload of empty or missing node_modules cache archive."
       fi
    waitFor: ['Create node_modules cache archive']

  # Step 13: Create .next/cache archive
  - name: 'ubuntu'
    id: 'Create .next cache archive'
    script: |
       #!/usr/bin/env bash
       set -e
       LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NEXT}"
       if [[ -d "/workspace/.next/cache" ]] && [[ -n "$(ls -A /workspace/.next/cache)" ]]; then
         echo "Creating .next/cache archive..."
         tar --ignore-failed-read -czf "${LOCAL_CACHE_FILE}" -C /workspace/.next cache
       else
         echo "Skipping .next/cache archiving (/workspace/.next/cache directory does not exist or is empty)."
         touch "${LOCAL_CACHE_FILE}"
       fi
    waitFor: ['Remove dummy container']

  # Step 14: Upload .next cache
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'Upload .next cache'
    script: |
       #!/usr/bin/env bash
       set -e
       CACHE_FILE_GCS_PATH="${_CACHE_BUCKET}/latest-${_CACHE_ARCHIVE_NEXT}"
       LOCAL_CACHE_FILE="/workspace/${_CACHE_ARCHIVE_NEXT}"
       if [[ -f "${LOCAL_CACHE_FILE}" ]] && [[ $(stat -c%s "${LOCAL_CACHE_FILE}") -gt 100 ]]; then
         echo "Uploading .next cache: ${CACHE_FILE_GCS_PATH}"
         gsutil -q -h "Cache-Control:private, max-age=0, no-transform" cp "${LOCAL_CACHE_FILE}" "${CACHE_FILE_GCS_PATH}"
       else
         echo "Skipping upload of empty or missing .next cache archive."
       fi
    waitFor: ['Create .next cache archive']

  # Step 15: Push the container image tags
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push SHA tag'
    args: ['push', '${_IMAGE_NAME}:${COMMIT_SHA}']
    waitFor: ['Upload node_modules cache', 'Upload .next cache']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push latest tag'
    args: ['push', '${_IMAGE_NAME}:latest']
    waitFor: ['Push SHA tag']

  # Step 16: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Deploy'
    entrypoint: gcloud
    args:
      - run
      - services
      - update
      - ${_SERVICE_NAME}
      - '--platform=managed'
      - '--image=${_IMAGE_NAME}:${COMMIT_SHA}'
      - '--labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=${COMMIT_SHA},gcb-build-id=${BUILD_ID},gcb-trigger-id=${_TRIGGER_ID}'
      - '--region=${_DEPLOY_REGION}'
      - '--quiet'
      # --- Set Runtime Environment Variables ---
      - '--set-env-vars=NEXT_PUBLIC_SUPABASE_URL=${_NEXT_PUBLIC_SUPABASE_URL}'
      - '--set-env-vars=NEXT_PUBLIC_SUPABASE_ANON_KEY=${_NEXT_PUBLIC_SUPABASE_ANON_KEY}'
      - '--set-env-vars=NEXT_PUBLIC_BASE_URL=${_NEXT_PUBLIC_BASE_URL}'
      - '--set-env-vars=NEXT_PUBLIC_LOGODEV_KEY=${_NEXT_PUBLIC_LOGODEV_KEY}'
      - '--set-env-vars=NEXT_PUBLIC_GEMINI_API_KEY=${_NEXT_PUBLIC_GEMINI_API_KEY}'
      - '--set-env-vars=NEXT_PUBLIC_MAPBOX_TOKEN=${_NEXT_PUBLIC_MAPBOX_TOKEN}'
      - '--set-env-vars=NEXT_PUBLIC_GA_TRACKING_ID=${_NEXT_PUBLIC_GA_TRACKING_ID}'
      - '--set-env-vars=REVALIDATION_SECRET_TOKEN=${_REVALIDATION_SECRET_TOKEN}'
    waitFor: ['Push latest tag']

# List images built
images:
  - '${_IMAGE_NAME}:${COMMIT_SHA}'
  - '${_IMAGE_NAME}:latest'

options:
  # machineType: 'E2_HIGHCPU_8'
  substitutionOption: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - web-app